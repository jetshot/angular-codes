Using Emitters, Input & Output to Pass Data to Components

ParentComponent
===============
mychild   = object[];
mychild[] = [
{id: 1, name: 'Joseph', received_action: 'none', response: '' };
{id: 2, name: 'Joanna', received_action: 'none', response: '' };
{id: 3, name: 'Joshua', received_action: 'none', response: '' };
];

hugChild(index: number)
{
  this.child[index].received_action = 'hug';
}

====================
ParentComponent HTML
====================
<parent [child]="mychild" (emitHug)="hugChild($event)"></parent>












====================
ChildComponent
====================
@Input()child: {id: string, name: string, received_action: string, response: string };
@Output()emitHug: EventEmitter<string> = new EventEmitter<string>();

fatherAction = '';
childName = '';
motherResponse = '';
respondToHug(event: Event)
{
  //this.emitHug.emit(event.target.data);
  //OR
  
  
  
  
  this.emitHug.emit(this.child.name)
  .pipe()
  .subscribe((v) => {
    
    this.mother_response(v);
  })
  ;
}



mother_response(childName: string)
{
  let response = '';
  if (this.child.received_action == 'hug') {
     this.fatherAction = this.child.received_action;
     this.childName = childName;
     this.motherResponse = 'happy';
     return response;
    }
}
====================
ChildComponent HTML
====================
<p>Papa {{ fatherAction }} {{ childName }} mother is {{ motherResponse }} </p>












